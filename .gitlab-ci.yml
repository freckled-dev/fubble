stages:
  - build
  - package
  - deploy

include:
  - local: '/web/landing/.gitlab-ci.yml'

build ubuntu_18.04 release:
  image: registry.gitlab.com/acof/fubble/ci/build_ubuntu_1804:v2
  tags:
    - linux
    - dedicated
  stage: build
  # services:
  #   - docker:dind
  variables:
    # DOCKER_HOST: "tcp://docker:2375"
    # DOCKER_DRIVER: "overlay2"
    FUBBLE_PREFIX_DIR: ${CI_PROJECT_DIR}/install
  script:
    - ccache -s
    - ./scripts/ci/build_release
  after_script:
    # - rm -r ./deploy/development/install
    - mv -v ../fubble_build/meson/meson-logs .
  artifacts:
    untracked: true
    expire_in: 1 week
    when: always

appimage:
  image: registry.gitlab.com/acof/fubble/ci/build_ubuntu_1804:v2
  stage: package
  needs:
    - build ubuntu_18.04 release
  variables:
    FUBBLE_PREFIX_DIR: ${CI_PROJECT_DIR}/install
  script:
    # extend ./scripts/install_qt.py to do this
    - aqt install --outputdir /qt 5.15.1 linux desktop -m qtcharts
    - export PATH="/qt/5.15.1/gcc_64/bin:${PATH}"
    - ./scripts/ci/package_appimage
  artifacts:
    paths:
      - ./Fubble*.AppImage*
    expire_in: 1 week

# documentation about windows runner on gitlab.com
# https://gitlab.com/gitlab-org/ci-cd/shared-runners/images/gcp/windows-containers/blob/master/cookbooks/preinstalled-software/README.md
.build windows updater release:
  stage: build
  tags:
    - windows
  before_script:
    - cd updater
    - $env:Path += ";C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/MSBuild/Current/bin"
    - $env:Path += ";C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/"
  script:
    - 'msbuild /p:Configuration=Release Updater.sln'
  artifacts:
    paths:
      - ./updater/bin/
    expire_in: 1 week

.innosetup:
  stage: package
  tags:
    - windows
  needs:
    - build windows updater release
  script:
    - choco install -y --no-progress python innosetup
    - $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    - python scripts/make_innosetup.py
  artifacts:
    paths:
      - ./*.exe

# https://gitlab.com/acof/fubble/-/issues/341
build windows updater release and innosetup:
  stage: build
  tags:
    - windows
  before_script:
    - cd updater
    - $env:Path += ";C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/MSBuild/Current/bin"
    - $env:Path += ";C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/"
  script:
    - 'msbuild /p:Configuration=Release Updater.sln'
    - cd ..
    - choco install -y --no-progress python innosetup
    - $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    - python scripts/make_innosetup.py
  artifacts:
    paths:
      - ./updater/bin/
      - ./*.exe
    expire_in: 1 week

.build windows: &build_windows
  stage: build
  tags:
    - windows
    - dedicated
  variables:
    FUBBLE_PREFIX_DIR: ${CI_PROJECT_DIR}/install_windows
  before_script:
    - choco install -y --no-progress python pkgconfiglite cmake --installargs 'ADD_CMAKE_TO_PATH=System'
    # - refreshenv # did not work
    - $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    - python --version
    - pip install conan aqtinstall
    - python scripts/install_qt.py
    - conan --version
  after_script:
    - mv -v ../fubble_build/meson/meson-logs .
  artifacts:
    untracked: true
    expire_in: 1 week
    when: always

build windows release:
  <<: *build_windows
  script:
    - python scripts/make_build.py --profile scripts/conan_profiles/windows_release

build windows debug:
  <<: *build_windows
  script:
    - python scripts/make_build.py --profile scripts/conan_profiles/windows_debug
  when: manual

deploy services:
  stage: deploy
  image: ubuntu:20.04
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "False"
  when: manual
  needs:
    - build ubuntu_18.04 release
    - appimage
    - build windows release
    - frontend_build_production
    - build windows updater release and innosetup
      # - innosetup
  before_script:
    - apt-get update && apt-get install -y openssh-client ansible git rsync
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_DEPLOY_PRIVATE_KEY")
  script:
    - ./scripts/deploy.py

